buildscript {
    ext {
        spring_version = '2.7.15'
        lombok_version = '1.18.26'
        restdocs_plugin_version = '0.16.4'
        asciiDocPlugin_version = '4.0.2'
    }
}

plugins {
    id 'com.epages.restdocs-api-spec' version "${restdocs_plugin_version}"
    id 'org.springframework.boot' version "${spring_version}"
    id 'io.spring.dependency-management' version "1.1.4"
    id 'war'
    id 'java'
    id 'org.asciidoctor.jvm.convert' version "${asciiDocPlugin_version}"
    id 'org.asciidoctor.jvm.pdf' version "${asciiDocPlugin_version}"
}

group = 'ru'
version = '1.0'
sourceCompatibility = 17

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.asciidoctor:asciidoctorj:2.5.7'
    implementation 'org.asciidoctor:asciidoctorj-pdf:1.6.2'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_version}"
    implementation "org.springframework.boot:spring-boot-starter-web:${spring_version}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${spring_version}"
    implementation "org.springframework.boot:spring-boot-starter-security:${spring_version}"
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation ('com.github.javafaker:javafaker:1.0.2'){
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    implementation 'org.slf4j:slf4j-simple:2.0.5'
    implementation 'com.h2database:h2:2.1.214'
//    implementation 'org.postgresql:postgresql'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
    testImplementation "org.springframework.boot:spring-boot-starter-test:${spring_version}"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocs_plugin_version}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:2.0.8.RELEASE"
    testImplementation 'org.springframework.security:spring-security-test:5.7.10'

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

task build_exe(type: Exec) {
    workingDir 'D:\\Desk\\Rep\\DipvLom\\project\\server'
    commandLine "launch4jc.exe", "exec.xml"
}

bootWar {
    archiveFileName = "EJournal"
}

javadoc {
    destinationDir = file("docs/javaDoc")
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PACKAGE
    options.overview = 'src/docs/docDescription.html'
}

task runnn_exe {
    dependsOn(bootWar)
    dependsOn(build_exe)
}

asciidoctorPdf {
    sourceDir '../../'
    outputDir 'docs/asciiDoc'
    asciidoctorj {
        attributes \
            'icons': 'font',
            'idseparator': '-',
            'docinfo': 'shared',
            'source-highlighter' : 'rouge'
    }
}

asciidoctor {
    sourceDir '../../'
    outputDir 'docs/asciiDoc'
    baseDirFollowsSourceFile()
    attributes \
        'icons': 'font',
        'snippets': file("build/generated-snippets"),
        'idseparator': '-',
        'docinfo': 'shared'
//    dependsOn asciidoctorPdf
}

openapi {
    host = 'localhost:8080'
    title = 'EJournal'
    description = file('src/docs/docDescription.html').text
//    tagDescriptionsPropertiesFile = 'src/docs/tag-descriptions.yaml'
    version = '1.0'
    format = 'json'
    outputDirectory = '/docs/swagger/htmlSwag'
    outputFileNamePrefix = 'swagger'
    snippetsDirectory = "build/generated-snippets"
}

openapi3 {
    servers = [ { url = "http://localhost:8080" } ]
    title = 'EJournal'
    description = file('src/docs/docDescription.html').text
    tagDescriptionsPropertiesFile = 'src/docs/swagger/tags.yaml'
    version = '1.0'
    format = 'json'
    outputDirectory = 'docs/swagger/htmlSwag'
    outputFileNamePrefix = 'swagger'
    snippetsDirectory = "build/generated-snippets"
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':openapi3') || graph.hasTask(':openapi')) {
        test.enabled = false
    }
}

//swagger {
//    apiSource {
//        springmvc = true
//        locations = [ 'ru.mirea.controllers']
//        schemes = [ 'http' ]
//        host = 'localhost:8080'
//        basePath = '/'
//        info {
//            title = 'EJournal'
//            version = 'v1'
//            description = 'This is a sample.'
////            contact {
////                email = 'email@email.com'
////                name = 'Name'
////                url = 'http://www.example.com'
////            }
//        }
////        securityDefinition {
////            name = 'basicAuth'
////            type = 'basic'
////        }
////        securityDefinition {
////            json = 'securityDefinition.json'
////        }
//        expandSuperTypes = false
//        outputFormats = ['json', 'html']
////        templatePath = "${project.rootDir}/src/main/resources/tempSwagger/strapdown.html.hbs"
//        outputPath = "${project.rootDir}/docs/swagger/index.html"
//        swaggerDirectory = "${project.rootDir}/docs/swagger/htmlSwag"
//        attachSwaggerArtifact = true
//    }
//}